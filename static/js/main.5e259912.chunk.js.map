{"version":3,"sources":["components/layout/TextInput.js","APIKeys.js","context.js","components/layout/SearchForm.js","components/weather/WeatherCard.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","_ref","name","label","type","placeholder","value","onChange","error","react_default","a","createElement","className","htmlFor","classnames","is-invalid","API_KEY","weatherAPI","Context","React","createContext","reducer","state","action","_action$payload","payload","main","sys","weather","wind","Object","objectSpread","temperature","temp","toFixed","city","country","humidity","description","icon","speed","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","dispatch","setState","inherits","createClass","key","props","children","Component","Consumer","SearchForm","zipcode","e","defineProperty","target","getWeather","_callee","res","regenerator_default","wrap","_context","prev","next","preventDefault","axios","get","sent","data","t0","stop","_this2","Fragment","bg-danger","onSubmit","bind","TextInput_TextInput","WeatherCard","src","alt","Footer","href","App","context_Provider","layout_SearchForm","weather_WeatherCard","layout_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e259912.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\n\nexport const TextInput = ({\n  name,\n  label,\n  type,\n  placeholder,\n  value,\n  onChange,\n  error\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        className={classnames('form-control', { 'is-invalid': error })}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n","const API_KEY = {\n  weatherAPI: '20dcc09738b693710bd6fab74bc9f6b0'\n};\n\nexport default API_KEY;\n","import React, { Component } from 'react';\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  const { main, name, sys, weather, wind } = action.payload;\n\n  switch (action.type) {\n    case 'UPDATE_LOCATION':\n      return {\n        ...state,\n        temperature: (((main.temp - 273.15) * 9) / 5 + 32).toFixed(0),\n        city: name,\n        country: sys.country,\n        humidity: main.humidity,\n        description: weather[0].description,\n        icon: weather[0].icon,\n        wind: (wind.speed / 1.609).toFixed(0),\n        error: ''\n      };\n    case 'ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport class Provider extends Component {\n  state = {\n    error: '',\n    dispatch: action => this.setState(state => reducer(state, action))\n  };\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, { Component } from 'react';\nimport { TextInput } from './TextInput';\nimport API_KEY from '../../APIKeys';\nimport axios from 'axios';\nimport { Consumer } from '../../context';\nimport classnames from 'classnames';\n\nclass SearchForm extends Component {\n  state = {\n    zipcode: ''\n  };\n\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  getWeather = async (dispatch, e) => {\n    e.preventDefault();\n\n    const { zipcode } = this.state;\n    try {\n      const res = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?zip=${zipcode},us&appid=${\n          API_KEY.weatherAPI\n        }`\n      );\n\n      dispatch({ type: 'UPDATE_LOCATION', payload: res.data });\n    } catch (e) {\n      dispatch({\n        type: 'ERROR',\n        payload: 'Please enter a valid US zip code.'\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch, city, country, error } = value;\n          return (\n            <React.Fragment>\n              <div className=\"d-flex flex-column justify-content-center\">\n                <div className=\"card mt-5 mb-3\">\n                  <div\n                    className={classnames(\n                      'card-body bg-primary text-white text-center',\n                      { 'bg-danger': error }\n                    )}\n                  >\n                    <h3 className=\"display-3\">\n                      {city ? `${city}, ${country}` : 'Weather Conditions'}\n                    </h3>\n                  </div>\n                </div>\n\n                <form\n                  className=\"form-inline mb-2 justify-content-center\"\n                  onSubmit={this.getWeather.bind(this, dispatch)}\n                >\n                  <TextInput\n                    type=\"text\"\n                    name=\"zipcode\"\n                    placeholder=\"Enter Zip Code...\"\n                    value={this.state.zipcode}\n                    onChange={this.onChange}\n                    error={error}\n                  />\n                  <button className=\"btn btn-outline-primary mx-2\">\n                    Search\n                  </button>\n                </form>\n              </div>\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\n\nclass WeatherCard extends Component {\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const {\n            temperature,\n            city,\n            humidity,\n            description,\n            icon,\n            wind,\n            error\n          } = value;\n\n          return (\n            <React.Fragment>\n              {city ? (\n                <React.Fragment>\n                  <div className=\"d-flex justify-content-center row-hl\">\n                    <div className=\"item-hl p-3 align-self-center\">\n                      <h2 className=\"display-3\">\n                        <strong>{temperature}° F</strong>\n                      </h2>\n                    </div>\n\n                    <div className=\"item-hl p-3\">\n                      <h4>\n                        {description}\n                        <img\n                          src={`http://openweathermap.org/img/w/${icon}.png`}\n                          alt=\"\"\n                        />\n                      </h4>\n                      <h4>Humidity: {humidity}%</h4>\n                      <h4>Wind Speed: {wind} MPH</h4>\n                    </div>\n                  </div>\n                </React.Fragment>\n              ) : (\n                <h3 className=\"text-danger text-center\">{error}</h3>\n              )}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default WeatherCard;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer text-center mt-5 fixed-bottom\">\n      <div className=\"d-flex justify-content-center row-hl\">\n        <div className=\"p-4 item-hl\">\n          <strong>David Mai</strong>\n        </div>\n        <div className=\"p-4 item-hl\">\n          <a\n            href=\"https://www.linkedin.com/in/nldavidmai/\"\n            className=\"text-dark\"\n          >\n            <i className=\"fab fa-linkedin\" />\n          </a>\n        </div>\n        <div className=\"p-4 item-hl\">\n          <a href=\"https://github.com/DevMai90\" className=\"text-dark\">\n            <i className=\"fab fa-github\" />\n          </a>\n        </div>\n        <div className=\"p-4 item-hl\">\n          <a href=\"https://twitter.com/devmai90\" className=\"text-dark\">\n            <i className=\"fab fa-twitter\" />\n          </a>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport SearchForm from './components/layout/SearchForm';\nimport WeatherCard from './components/weather/WeatherCard';\nimport Footer from './components/layout/Footer';\n\nimport { Provider } from './context';\nimport './bootstrap.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <div className=\"App\">\n          <div className=\"container\">\n            <SearchForm />\n            <WeatherCard />\n            <Footer />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}